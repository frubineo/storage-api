security:
    enable_authenticator_manager: true
    
    # üîê HI√âRARCHIE DES R√îLES STORAGE-SP√âCIFIQUE
    role_hierarchy:
        ROLE_USER:                []
        ROLE_FILE_VIEWER:         [ROLE_USER]
        ROLE_FILE_UPLOADER:       [ROLE_USER, ROLE_FILE_VIEWER]
        ROLE_FILE_MANAGER:        [ROLE_USER, ROLE_FILE_UPLOADER]
        ROLE_STORAGE_ADMIN:       [ROLE_USER, ROLE_FILE_MANAGER]
        ROLE_CLOUD_MANAGER:       [ROLE_USER, ROLE_STORAGE_ADMIN]
        ROLE_BACKUP_MANAGER:      [ROLE_USER, ROLE_STORAGE_ADMIN]
        ROLE_ENCRYPTION_MANAGER:  [ROLE_USER, ROLE_STORAGE_ADMIN]
        ROLE_CDN_MANAGER:         [ROLE_USER, ROLE_STORAGE_ADMIN]
        ROLE_ANALYTICS_VIEWER:    [ROLE_USER, ROLE_FILE_VIEWER]
        ROLE_QUOTA_MANAGER:       [ROLE_USER, ROLE_STORAGE_ADMIN]
        ROLE_INTEGRITY_CHECKER:   [ROLE_USER, ROLE_STORAGE_ADMIN]
        ROLE_API_CONSUMER:        [ROLE_USER]
        ROLE_WEBHOOK_RECEIVER:    [ROLE_SYSTEM]
        ROLE_SYNC_AGENT:          [ROLE_SYSTEM] # üÜï R√¥le pour agents de sync
        ROLE_BACKUP_AGENT:        [ROLE_SYSTEM] # üÜï R√¥le pour agents de backup
        ROLE_CDN_AGENT:           [ROLE_SYSTEM] # üÜï R√¥le pour agents CDN
        ROLE_ADMIN:               [ROLE_USER, ROLE_STORAGE_ADMIN, ROLE_CLOUD_MANAGER, ROLE_BACKUP_MANAGER]
        ROLE_SUPER_ADMIN:         [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
        ROLE_SYSTEM:              [ROLE_ADMIN]
        ROLE_SECURITY:            [ROLE_SUPER_ADMIN] # üÜï R√¥le s√©curit√© d√©di√©

    # üîë HASHAGE ULTRA-S√âCURIS√â
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: 'sodium' # üÜï Sodium vs bcrypt
            migrate_from: ['bcrypt']

    # üë• PROVIDERS D'AUTHENTIFICATION STORAGE
    providers:
        jwt_users:
            jwt: ~
        security_api_users:
            entity:
                class: StorageApi\Infrastructure\Security\SecurityApiUser
                property: email
        storage_api_users:
            entity:
                class: StorageApi\Infrastructure\Security\StorageApiUser
                property: email
        webhook_users:
            memory:
                users:
                    webhook_receiver: { password: '%env(WEBHOOK_RECEIVER_SECRET)%', roles: [ROLE_WEBHOOK_RECEIVER] }
        sync_agent_users:
            memory:
                users:
                    sync_agent: { password: '%env(SYNC_AGENT_SECRET)%', roles: [ROLE_SYNC_AGENT] }
        backup_agent_users:
            memory:
                users:
                    backup_agent: { password: '%env(BACKUP_AGENT_SECRET)%', roles: [ROLE_BACKUP_AGENT] }
        cdn_agent_users:
            memory:
                users:
                    cdn_agent: { password: '%env(CDN_AGENT_SECRET)%', roles: [ROLE_CDN_AGENT] }
        system_users:
            memory:
                users:
                    system_storage: { password: '%env(SYSTEM_STORAGE_SECRET)%', roles: [ROLE_SYSTEM] }

    # üõ°Ô∏è FIREWALLS S√âCURIS√âS STORAGE
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # üè• Health Checks - Acc√®s libre
        health:
            pattern: ^/(health|ready|metrics)
            security: false

        # üîÑ Agents de synchronisation - Authentification sp√©cialis√©e
        sync:
            pattern: ^/api/v1/sync
            stateless: true
            custom_authenticators:
                - StorageApi\Infrastructure\Security\SyncAgentAuthenticator
            entry_point: StorageApi\Infrastructure\Security\SyncAgentAuthenticator

        # üíæ Agents de backup - Protection ultra-stricte
        backup:
            pattern: ^/api/v1/backup
            stateless: true
            custom_authenticators:
                - StorageApi\Infrastructure\Security\BackupAgentAuthenticator
            entry_point: StorageApi\Infrastructure\Security\BackupAgentAuthenticator

        # üåê Agents CDN - Authentification CDN
        cdn:
            pattern: ^/api/v1/cdn
            stateless: true
            custom_authenticators:
                - StorageApi\Infrastructure\Security\CDNAgentAuthenticator
            entry_point: StorageApi\Infrastructure\Security\CDNAgentAuthenticator

        # üì® Webhooks - Protection HMAC ultra-stricte
        webhooks:
            pattern: ^/api/v1/webhooks
            stateless: true
            custom_authenticators:
                - StorageApi\Infrastructure\Security\WebhookAuthenticator
                - StorageApi\Infrastructure\Security\HMACAuthenticator
            entry_point: StorageApi\Infrastructure\Security\WebhookAuthenticator

        # üîê API Syst√®me - Authentification stricte
        system_api:
            pattern: ^/api/v1/system
            stateless: true
            custom_authenticators:
                - StorageApi\Infrastructure\Security\SystemAuthenticator
            entry_point: StorageApi\Infrastructure\Security\SystemAuthenticator

        # üìÅ API Publique Lecture - Cache + Rate limiting
        public_files:
            pattern: ^/api/v1/files/public
            stateless: true
            security: false # Fichiers publics, s√©curis√© par rate limiting

        # üîê API Priv√©e - JWT + API Key int√©gr√© security-api
        api:
            pattern: ^/api
            stateless: true
            custom_authenticators:
                - lexik_jwt_authentication.jwt_token_authenticator
                - StorageApi\Infrastructure\Security\SecurityApiKeyAuthenticator
            entry_point: lexik_jwt_authentication.jwt_token_authenticator

        # üåê Interface Web - Sessions s√©curis√©es
        main:
            lazy: true
            provider: jwt_users
            custom_authenticators:
                - lexik_jwt_authentication.jwt_token_authenticator
            entry_point: lexik_jwt_authentication.jwt_token_authenticator
            
            # üõ°Ô∏è Protection contre les attaques par force brute
            login_throttling:
                max_attempts: 3
                interval: '15 minutes'
                
            # üîí Logout s√©curis√©
            logout:
                path: api_logout
                target: api_login

    # üö´ CONTR√îLE D'ACC√àS GRANULAIRE STORAGE
    access_control:
        # ‚úÖ Health checks - Libre
        - { path: ^/(health|ready|metrics), roles: PUBLIC_ACCESS }
        
        # üìÅ Fichiers publics - Libre (avec rate limiting)
        - { path: ^/api/v1/files/public, roles: PUBLIC_ACCESS }
        
        # üîÑ Synchronisation - Agents autoris√©s
        - { path: ^/api/v1/sync, roles: [ROLE_SYNC_AGENT, ROLE_SYSTEM] }
        
        # üíæ Backup - Agents autoris√©s uniquement
        - { path: ^/api/v1/backup, roles: [ROLE_BACKUP_AGENT, ROLE_BACKUP_MANAGER, ROLE_SYSTEM] }
        
        # üåê CDN - Agents autoris√©s uniquement
        - { path: ^/api/v1/cdn, roles: [ROLE_CDN_AGENT, ROLE_CDN_MANAGER, ROLE_SYSTEM] }
        
        # üì® Webhooks - Services autoris√©s uniquement
        - { path: ^/api/v1/webhooks, roles: [ROLE_WEBHOOK_RECEIVER, ROLE_SYSTEM] }
        
        # üîê API Syst√®me - Syst√®me uniquement
        - { path: ^/api/v1/system, roles: ROLE_SYSTEM }
        
        # üìÅ Files Overview - Viewers et plus
        - { path: ^/api/v1/files, methods: [GET], roles: [ROLE_FILE_VIEWER, ROLE_SYSTEM] }
        - { path: ^/api/v1/files, methods: [POST], roles: [ROLE_FILE_UPLOADER, ROLE_SYSTEM] }
        - { path: ^/api/v1/files/[^/]+, methods: [PUT, PATCH], roles: [ROLE_FILE_MANAGER, ROLE_SYSTEM] }
        - { path: ^/api/v1/files/[^/]+, methods: [DELETE], roles: [ROLE_FILE_MANAGER, ROLE_SYSTEM] }
        
        # üìÇ Directories - File managers et plus
        - { path: ^/api/v1/directories, methods: [GET], roles: [ROLE_FILE_VIEWER, ROLE_SYSTEM] }
        - { path: ^/api/v1/directories, methods: [POST], roles: [ROLE_FILE_MANAGER, ROLE_SYSTEM] }
        - { path: ^/api/v1/directories/[^/]+, methods: [PUT, PATCH], roles: [ROLE_FILE_MANAGER, ROLE_SYSTEM] }
        - { path: ^/api/v1/directories/[^/]+, methods: [DELETE], roles: [ROLE_STORAGE_ADMIN, ROLE_SYSTEM] }
        
        # üì§ Upload - Uploaders et plus
        - { path: ^/api/v1/upload, methods: [POST], roles: [ROLE_FILE_UPLOADER, ROLE_SYSTEM] }
        - { path: ^/api/v1/upload/chunk, methods: [POST], roles: [ROLE_FILE_UPLOADER, ROLE_SYSTEM] }
        - { path: ^/api/v1/upload/complete, methods: [POST], roles: [ROLE_FILE_UPLOADER, ROLE_SYSTEM] }
        
        # üì• Download - Viewers et plus
        - { path: ^/api/v1/download, methods: [GET], roles: [ROLE_FILE_VIEWER, ROLE_SYSTEM] }
        - { path: ^/api/v1/download/[^/]+, methods: [GET], roles: [ROLE_FILE_VIEWER, ROLE_SYSTEM] }
        
        # üñºÔ∏è Thumbnails - Viewers et plus
        - { path: ^/api/v1/thumbnails, methods: [GET], roles: [ROLE_FILE_VIEWER, ROLE_SYSTEM] }
        - { path: ^/api/v1/thumbnails, methods: [POST], roles: [ROLE_FILE_MANAGER, ROLE_SYSTEM] }
        
        # üîê Encryption - Encryption managers
        - { path: ^/api/v1/encryption, methods: [GET], roles: [ROLE_ENCRYPTION_MANAGER, ROLE_SYSTEM] }
        - { path: ^/api/v1/encryption, methods: [POST], roles: [ROLE_ENCRYPTION_MANAGER, ROLE_SYSTEM] }
        - { path: ^/api/v1/decrypt, methods: [POST], roles: [ROLE_ENCRYPTION_MANAGER, ROLE_SYSTEM] }
        
        # ‚òÅÔ∏è Cloud Storage - Cloud managers
        - { path: ^/api/v1/cloud, methods: [GET], roles: [ROLE_CLOUD_MANAGER, ROLE_SYSTEM] }
        - { path: ^/api/v1/cloud/s3, methods: [POST, PUT, PATCH], roles: [ROLE_CLOUD_MANAGER, ROLE_SYSTEM] }
        - { path: ^/api/v1/cloud/azure, methods: [POST, PUT, PATCH], roles: [ROLE_CLOUD_MANAGER, ROLE_SYSTEM] }
        - { path: ^/api/v1/cloud/gcp, methods: [POST, PUT, PATCH], roles: [ROLE_CLOUD_MANAGER, ROLE_SYSTEM] }
        
        # üìä Quota Management - Quota managers
        - { path: ^/api/v1/quota, methods: [GET], roles: [ROLE_QUOTA_MANAGER, ROLE_SYSTEM] }
        - { path: ^/api/v1/quota, methods: [POST, PUT, PATCH], roles: [ROLE_QUOTA_MANAGER, ROLE_SYSTEM] }
        
        # üîç Integrity Checks - Integrity checkers
        - { path: ^/api/v1/integrity, methods: [GET], roles: [ROLE_INTEGRITY_CHECKER, ROLE_SYSTEM] }
        - { path: ^/api/v1/integrity/check, methods: [POST], roles: [ROLE_INTEGRITY_CHECKER, ROLE_SYSTEM] }
        
        # üìä Analytics Storage - Analysts et plus
        - { path: ^/api/v1/analytics, methods: [GET], roles: [ROLE_ANALYTICS_VIEWER, ROLE_SYSTEM] }
        - { path: ^/api/v1/reports, methods: [GET], roles: [ROLE_ANALYTICS_VIEWER, ROLE_SYSTEM] }
        
        # üîÑ Versioning - File managers et plus
        - { path: ^/api/v1/versions, methods: [GET], roles: [ROLE_FILE_VIEWER, ROLE_SYSTEM] }
        - { path: ^/api/v1/versions, methods: [POST], roles: [ROLE_FILE_MANAGER, ROLE_SYSTEM] }
        - { path: ^/api/v1/versions/[^/]+, methods: [DELETE], roles: [ROLE_STORAGE_ADMIN, ROLE_SYSTEM] }
        
        # üóúÔ∏è Compression - File managers et plus
        - { path: ^/api/v1/compress, methods: [POST], roles: [ROLE_FILE_MANAGER, ROLE_SYSTEM] }
        - { path: ^/api/v1/decompress, methods: [POST], roles: [ROLE_FILE_MANAGER, ROLE_SYSTEM] }
        
        # üîß Administration compl√®te - Admins
        - { path: ^/api/v1/admin, roles: ROLE_ADMIN }
        
        # üõ°Ô∏è S√©curit√© - R√¥le s√©curit√©
        - { path: ^/api/v1/security, roles: ROLE_SECURITY }
        
        # üåê Par d√©faut - Authentifi√©
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        
        # üè† Interface - Libre
        - { path: ^/, roles: PUBLIC_ACCESS }

    # üî• DURCISSEMENT S√âCURITAIRE STORAGE
    access_decision_manager:
        strategy: unanimous # üÜï Toutes les r√®gles doivent √™tre satisfaites
        allow_if_all_abstain: false
        allow_if_equal_granted_denied: false 